package com.project.urlshortener.service;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.project.urlshortener.dto.UrlDto;
import com.project.urlshortener.exception.UrlNotFoundException;
import com.project.urlshortener.model.Url;
import com.project.urlshortener.repository.UrlRepository;
import com.google.common.hash.Hashing;
import com.google.common.hash.HashFunction;

@Service
public class UrlShortenerService implements UrlShortenerServiceInterface{
	
	@Autowired
    private UrlRepository repository;

	@Override
	public UrlDto addUrl(UrlDto urlDto) {
	    Url url = repository.findByLongUrl(urlDto.getLongUrl());
	    if (url != null) {
	        urlDto.setLongUrl(url.getLongUrl());
	        urlDto.setShortKey(url.getShortKey());
	        urlDto.setClickCount(url.getClickCount());
	    } else {
	        url = new Url();
	        url.setLongUrl(urlDto.getLongUrl());
	        url.setShortKey(shortenUrl(urlDto.getLongUrl()));
	        urlDto.setShortKey(url.getShortKey());
	        url.setClickCount(0);
	        repository.save(url);
	    }
	    return urlDto;
	}

	@Override
	public String updateClick(String shortKey) throws UrlNotFoundException {
	    Url url = repository.findByShortKey(shortKey);
	    if (url == null) {
	        throw new UrlNotFoundException("Short key not found: " + shortKey);
	    }
	    url.setClickCount(url.getClickCount() + 1);
	    repository.updateClickCount(url.getShortKey(), url.getClickCount());
	    return url.getLongUrl();
	}
	
	@Override
	public void deleteUrl(String shortKey) throws UrlNotFoundException{
		repository.deleteByShortKey(shortKey);
	}
	
	@Override
	public List<UrlDto> viewAllUrls(){
		List<Url> list=(List<Url>) repository.findAll();
		List<UrlDto> urlList = new ArrayList<>();
		list.forEach(url->{
			UrlDto urlDto= new UrlDto();
			urlDto.setLongUrl(url.getLongUrl());
			urlDto.setShortKey(url.getShortKey());
			urlDto.setClickCount(url.getClickCount());
            urlList.add(urlDto);
		});
		return urlList;
	}

	public String shortenUrl(String url) {
		
		HashFunction HASH_FUNCTION = Hashing.goodFastHash(32);
        String key = "urls-" + HASH_FUNCTION.hashString(url, StandardCharsets.UTF_8).toString();

        return key;
    }
	
}

